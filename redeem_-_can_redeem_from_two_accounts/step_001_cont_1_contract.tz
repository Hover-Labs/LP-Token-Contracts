parameter (or (or (or (pair %approve (address %spender) (nat %value)) (or (pair %burn (address %address) (nat %value)) (nat %deposit))) (or (or (pair %getAdministrator unit (contract address)) (pair %getAllowance (pair (address %owner) (address %spender)) (contract nat))) (or (pair %getBalance address (contract nat)) (pair %getTotalSupply unit (contract nat))))) (or (or (pair %mint (address %address) (nat %value)) (or (nat %redeem) (address %setAdministrator))) (or (or (bool %setPause) (pair %transfer (address %from) (pair (address %to) (nat %value)))) (or (unit %updateBalance) (nat %updateBalance_callback)))));
storage   (pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%approve
                # == approve ==
                # if ~ (self.data.balances.contains(sp.sender)): # @storage : @parameter%approve
                DUP;        # @storage : @storage : @parameter%approve
                DUG 2;      # @storage : @parameter%approve : @storage
                CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%approve : @storage
                CDR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : @parameter%approve : @storage
                CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%approve : @storage
                SENDER;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%approve : @storage
                MEM;        # bool : @parameter%approve : @storage
                IF
                  {}
                  {
                    SWAP;       # @storage : @parameter%approve
                    # self.data.balances[sp.sender] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%approve
                    UNPAIR;     # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                    UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                    SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                    UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                    PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                    SENDER;     # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                    UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                    PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                    SWAP;       # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                    PAIR;       # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                    PAIR;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    SWAP;       # @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                  }; # @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                SWAP;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                # sp.verify(~ self.data.paused) # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                DUP;        # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                DUG 2;      # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                CAR;        # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool) : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                CDR;        # pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                CDR;        # bool : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                IF
                  {
                    PUSH string "WrongCondition: ~ self.data.paused"; # string : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                # sp.verify((self.data.balances[sp.sender].approvals.get(params.spender, default_value = 0) == 0) | (params.value == 0), message = 'UnsafeAllowanceChange') # @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                PUSH nat 0; # nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                DUP 3;      # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                CAR;        # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool) : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                CDR;        # pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                SENDER;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                IF_SOME
                  {
                    # of_some: Get-item:90 # @some : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                  }
                  {
                    PUSH int 90; # int : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    FAILWITH;   # FAILED
                  }; # @some : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                CAR;        # map address nat : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                DUP 3;      # @parameter%approve : map address nat : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                CAR;        # address : map address nat : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                GET;        # option nat : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                IF_SOME
                  {
                    # of_some: Get-item:90 # @some : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                  }
                  {
                    PUSH nat 0; # nat : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                  }; # nat : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                COMPARE;    # int : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                EQ;         # bool : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                IF
                  {
                    PUSH bool True; # bool : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                  }
                  {
                    DUP;        # @parameter%approve : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CDR;        # nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PUSH nat 0; # nat : nat : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    COMPARE;    # int : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    EQ;         # bool : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                  }; # bool : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                IF
                  {}
                  {
                    PUSH string "UnsafeAllowanceChange"; # string : @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    FAILWITH;   # FAILED
                  }; # @parameter%approve : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                SWAP;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                # self.data.balances[sp.sender].approvals[params.spender] = params.value # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                UNPAIR;     # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                UNPAIR;     # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                SWAP;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                SENDER;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                IF_SOME
                  {}
                  {
                    PUSH int 92; # int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                UNPAIR;     # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                DUP 8;      # @parameter%approve : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                CDR;        # nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                SOME;       # option nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%approve
                DIG 8;      # @parameter%approve : option nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                CAR;        # address : option nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                UPDATE;     # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                PAIR;       # pair (map address nat) nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                UPDATE;     # big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                PAIR;       # pair (big_map address (pair (map address nat) nat)) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                SWAP;       # address : pair (big_map address (pair (map address nat) nat)) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                NIL operation; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%burn
                    # == burn ==
                    # sp.verify((sp.sender == self.data.administrator) | (sp.sender == sp.self_address)) # @storage : @parameter%burn
                    DUP;        # @storage : @storage : @parameter%burn
                    DUG 2;      # @storage : @parameter%burn : @storage
                    CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%burn : @storage
                    CAR;        # address : @parameter%burn : @storage
                    SENDER;     # address : address : @parameter%burn : @storage
                    COMPARE;    # int : @parameter%burn : @storage
                    EQ;         # bool : @parameter%burn : @storage
                    IF
                      {
                        PUSH bool True; # bool : @parameter%burn : @storage
                      }
                      {
                        SELF_ADDRESS; # address : @parameter%burn : @storage
                        SENDER;     # address : address : @parameter%burn : @storage
                        COMPARE;    # int : @parameter%burn : @storage
                        EQ;         # bool : @parameter%burn : @storage
                      }; # bool : @parameter%burn : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: (sp.sender == self.data.administrator) | (sp.sender == sp.self_address)"; # string : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%burn : @storage
                    # sp.verify(self.data.balances[params.address].balance >= params.value) # @parameter%burn : @storage
                    DUP;        # @parameter%burn : @parameter%burn : @storage
                    CDR;        # nat : @parameter%burn : @storage
                    DUP 3;      # @storage : nat : @parameter%burn : @storage
                    CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%burn : @storage
                    CDR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : nat : @parameter%burn : @storage
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%burn : @storage
                    DUP 3;      # @parameter%burn : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%burn : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%burn : @storage
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%burn : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:129 # @some : nat : @parameter%burn : @storage
                      }
                      {
                        PUSH int 129; # int : nat : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @some : nat : @parameter%burn : @storage
                    CDR;        # nat : nat : @parameter%burn : @storage
                    COMPARE;    # int : @parameter%burn : @storage
                    GE;         # bool : @parameter%burn : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.balances[params.address].balance >= params.value"; # string : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%burn : @storage
                    SWAP;       # @storage : @parameter%burn
                    # self.data.balances[params.address].balance = sp.as_nat(self.data.balances[params.address].balance - params.value) # @storage : @parameter%burn
                    DUP;        # @storage : @storage : @parameter%burn
                    DUG 2;      # @storage : @parameter%burn : @storage
                    UNPAIR;     # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    DUP 6;      # @parameter%burn : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    IF_SOME
                      {}
                      {
                        PUSH int 130; # int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    CAR;        # map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    DUP 7;      # @parameter%burn : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    CDR;        # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : @storage
                    DIG 8;      # @storage : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    CDR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    DUP 9;      # @parameter%burn : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    IF_SOME
                      {
                        # of_some: Get-item:130 # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                      }
                      {
                        PUSH int 130; # int : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                        FAILWITH;   # FAILED
                      }; # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    CDR;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    SUB;        # int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    ISNAT;      # option nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    IF_SOME
                      {}
                      {
                        PUSH int 130; # int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                        FAILWITH;   # FAILED
                      }; # @some : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    SWAP;       # map address nat : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    PAIR;       # pair (map address nat) @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    SOME;       # option (pair (map address nat) @some) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    SWAP;       # address : option (pair (map address nat) @some) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    UPDATE;     # big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    PAIR;       # pair (big_map address (pair (map address nat) nat)) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    SWAP;       # address : pair (big_map address (pair (map address nat) nat)) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn
                    PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    # self.data.totalSupply = sp.as_nat(self.data.totalSupply - params.value) # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%burn : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SWAP;       # pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair address (pair (big_map address (pair (map address nat) nat)) bool) : @parameter%burn : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    UNPAIR;     # pair (int %state) (address %tokenAddress) : pair (nat %totalSupply) (nat %underlyingBalance) : pair address (pair (big_map address (pair (map address nat) nat)) bool) : @parameter%burn : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SWAP;       # pair (nat %totalSupply) (nat %underlyingBalance) : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool) : @parameter%burn : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CDR;        # nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool) : @parameter%burn : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    DIG 3;      # @parameter%burn : nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CDR;        # nat : nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    DIG 4;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : nat : nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                    GET 5;      # nat : nat : nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                    SUB;        # int : nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                    ISNAT;      # option nat : nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                    IF_SOME
                      {}
                      {
                        PUSH int 131; # int : nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                        FAILWITH;   # FAILED
                      }; # @some : nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                    PAIR;       # pair @some nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                    SWAP;       # pair (int %state) (address %tokenAddress) : pair @some nat : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                    PAIR;       # pair (pair (int %state) (address %tokenAddress)) (pair @some nat) : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                    SWAP;       # pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair (int %state) (address %tokenAddress)) (pair @some nat)
                    PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair @some nat))
                    NIL operation; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair @some nat))
                  }
                  {
                    # == deposit ==
                    # newTokens = sp.local("newTokens", params * 1000000000000000000) # @parameter%deposit : @storage
                    DUP;        # @parameter%deposit : @parameter%deposit : @storage
                    PUSH nat 1000000000000000000; # nat : @parameter%deposit : @parameter%deposit : @storage
                    MUL;        # nat : @parameter%deposit : @storage
                    # if self.data.totalSupply != 0: # nat : @parameter%deposit : @storage
                    PUSH nat 0; # nat : nat : @parameter%deposit : @storage
                    DUP 4;      # @storage : nat : nat : @parameter%deposit : @storage
                    GET 5;      # nat : nat : nat : @parameter%deposit : @storage
                    COMPARE;    # int : nat : @parameter%deposit : @storage
                    NEQ;        # bool : nat : @parameter%deposit : @storage
                    IF
                      {
                        DROP;       # @parameter%deposit : @storage
                        # newUnderlyingBalance = sp.local("newUnderlyingBalance", self.data.underlyingBalance + params) # @parameter%deposit : @storage
                        DUP;        # @parameter%deposit : @parameter%deposit : @storage
                        DUP 3;      # @storage : @parameter%deposit : @parameter%deposit : @storage
                        GET 6;      # nat : @parameter%deposit : @parameter%deposit : @storage
                        ADD;        # nat : @parameter%deposit : @storage
                        # fractionOfPoolOwnership = sp.local("fractionOfPoolOwnership", (params * 1000000000000000000) // newUnderlyingBalance.value) # nat : @parameter%deposit : @storage
                        PUSH nat 1000000000000000000; # nat : nat : @parameter%deposit : @storage
                        DUP 3;      # @parameter%deposit : nat : nat : @parameter%deposit : @storage
                        MUL;        # nat : nat : @parameter%deposit : @storage
                        EDIV;       # option (pair nat nat) : @parameter%deposit : @storage
                        IF_SOME
                          {
                            CAR;        # nat : @parameter%deposit : @storage
                          }
                          {
                            PUSH int 52; # int : @parameter%deposit : @storage
                            FAILWITH;   # FAILED
                          }; # nat : @parameter%deposit : @storage
                        # newTokens.value = (fractionOfPoolOwnership.value * self.data.totalSupply) // sp.as_nat(1000000000000000000 - fractionOfPoolOwnership.value) # nat : @parameter%deposit : @storage
                        DUP;        # nat : nat : @parameter%deposit : @storage
                        PUSH nat 1000000000000000000; # nat : nat : nat : @parameter%deposit : @storage
                        SUB;        # int : nat : @parameter%deposit : @storage
                        ISNAT;      # option nat : nat : @parameter%deposit : @storage
                        IF_SOME
                          {}
                          {
                            PUSH int 53; # int : nat : @parameter%deposit : @storage
                            FAILWITH;   # FAILED
                          }; # @some : nat : @parameter%deposit : @storage
                        DUP 4;      # @storage : @some : nat : @parameter%deposit : @storage
                        GET 5;      # nat : @some : nat : @parameter%deposit : @storage
                        DIG 2;      # nat : nat : @some : @parameter%deposit : @storage
                        MUL;        # nat : @some : @parameter%deposit : @storage
                        EDIV;       # option (pair nat nat) : @parameter%deposit : @storage
                        IF_SOME
                          {
                            CAR;        # nat : @parameter%deposit : @storage
                          }
                          {
                            PUSH int 53; # int : @parameter%deposit : @storage
                            FAILWITH;   # FAILED
                          }; # nat : @parameter%deposit : @storage
                      }
                      {}; # nat : @parameter%deposit : @storage
                    # self.data.underlyingBalance += params # nat : @parameter%deposit : @storage
                    DIG 2;      # @storage : nat : @parameter%deposit
                    UNPAIR;     # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : nat : @parameter%deposit
                    SWAP;       # pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%deposit
                    UNPAIR;     # pair (int %state) (address %tokenAddress) : pair (nat %totalSupply) (nat %underlyingBalance) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%deposit
                    SWAP;       # pair (nat %totalSupply) (nat %underlyingBalance) : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%deposit
                    UNPAIR;     # nat : nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%deposit
                    SWAP;       # nat : nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%deposit
                    DUP 6;      # @parameter%deposit : nat : nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%deposit
                    ADD;        # nat : nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%deposit
                    SWAP;       # nat : nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%deposit
                    PAIR;       # pair nat nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%deposit
                    SWAP;       # pair (int %state) (address %tokenAddress) : pair nat nat : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%deposit
                    PAIR;       # pair (pair (int %state) (address %tokenAddress)) (pair nat nat) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%deposit
                    SWAP;       # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair (int %state) (address %tokenAddress)) (pair nat nat) : nat : @parameter%deposit
                    PAIR;       # pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat)) : nat : @parameter%deposit
                    DUG 2;      # nat : @parameter%deposit : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = params), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.tokenAddress, entry_point='transfer').open_some()) # nat : @parameter%deposit : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    NIL operation; # list operation : nat : @parameter%deposit : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    DUP 4;      # pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat)) : list operation : nat : @parameter%deposit : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    CDR;        # pair (pair (int %state) (address %tokenAddress)) (pair nat nat) : list operation : nat : @parameter%deposit : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    CAR;        # pair (int %state) (address %tokenAddress) : list operation : nat : @parameter%deposit : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    CDR;        # address : list operation : nat : @parameter%deposit : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : @parameter%deposit : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    IF_SOME
                      {}
                      {
                        PUSH int 64; # int : list operation : nat : @parameter%deposit : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                        FAILWITH;   # FAILED
                      }; # @some : list operation : nat : @parameter%deposit : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%deposit : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    DIG 4;      # @parameter%deposit : mutez : @some : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    SELF_ADDRESS; # address : @parameter%deposit : mutez : @some : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    PAIR %to %value; # pair (address %to) (@parameter%deposit %value) : mutez : @some : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    SENDER;     # address : pair (address %to) (@parameter%deposit %value) : mutez : @some : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    PAIR %from; # pair (address %from) (pair (address %to) (@parameter%deposit %value)) : mutez : @some : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    TRANSFER_TOKENS; # operation : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    CONS;       # list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    # sp.transfer(sp.record(address = sp.sender, value = newTokens.value), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), sp.self_address, entry_point='mint').open_some()) # list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    SELF_ADDRESS; # address : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    IF_SOME
                      {}
                      {
                        PUSH int 76; # int : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                        FAILWITH;   # FAILED
                      }; # @some : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    PUSH mutez 0; # mutez : @some : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    DIG 3;      # nat : mutez : @some : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    SENDER;     # address : nat : mutez : @some : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    PAIR %address %value; # pair (address %address) (nat %value) : mutez : @some : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                    CONS;       # list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                  }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
              }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%getAdministrator
                    # == getAdministrator ==
                    # sp.result(self.data.administrator) # @storage : @parameter%getAdministrator
                    DUP;        # @storage : @storage : @parameter%getAdministrator
                    DUG 2;      # @storage : @parameter%getAdministrator : @storage
                    CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%getAdministrator : @storage
                    CAR;        # address : @parameter%getAdministrator : @storage
                    # sp.transfer(__s97.value, sp.tez(0), sp.snd(params)) # address : @parameter%getAdministrator : @storage
                    NIL operation; # list operation : address : @parameter%getAdministrator : @storage
                    DIG 2;      # @parameter%getAdministrator : list operation : address : @storage
                    CDR;        # contract address : list operation : address : @storage
                    PUSH mutez 0; # mutez : contract address : list operation : address : @storage
                    DIG 3;      # address : mutez : contract address : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%getAllowance
                    # == getAllowance ==
                    # sp.result(self.data.balances[sp.fst(params).owner].approvals[sp.fst(params).spender]) # @storage : @parameter%getAllowance
                    DUP;        # @storage : @storage : @parameter%getAllowance
                    DUG 2;      # @storage : @parameter%getAllowance : @storage
                    CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%getAllowance : @storage
                    CDR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : @parameter%getAllowance : @storage
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : @storage
                    SWAP;       # @parameter%getAllowance : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUP;        # @parameter%getAllowance : @parameter%getAllowance : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUG 2;      # @parameter%getAllowance : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : @storage
                    CAR;        # pair (address %owner) (address %spender) : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : @storage
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:104 # @some : @parameter%getAllowance : @storage
                      }
                      {
                        PUSH int 104; # int : @parameter%getAllowance : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%getAllowance : @storage
                    CAR;        # map address nat : @parameter%getAllowance : @storage
                    SWAP;       # @parameter%getAllowance : map address nat : @storage
                    DUP;        # @parameter%getAllowance : @parameter%getAllowance : map address nat : @storage
                    DUG 2;      # @parameter%getAllowance : map address nat : @parameter%getAllowance : @storage
                    CAR;        # pair (address %owner) (address %spender) : map address nat : @parameter%getAllowance : @storage
                    CDR;        # address : map address nat : @parameter%getAllowance : @storage
                    GET;        # option nat : @parameter%getAllowance : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:104 # @some : @parameter%getAllowance : @storage
                      }
                      {
                        PUSH int 104; # int : @parameter%getAllowance : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%getAllowance : @storage
                    # sp.transfer(__s98.value, sp.tez(0), sp.snd(params)) # @some : @parameter%getAllowance : @storage
                    NIL operation; # list operation : @some : @parameter%getAllowance : @storage
                    DIG 2;      # @parameter%getAllowance : list operation : @some : @storage
                    CDR;        # contract nat : list operation : @some : @storage
                    PUSH mutez 0; # mutez : contract nat : list operation : @some : @storage
                    DIG 3;      # @some : mutez : contract nat : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }; # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%getBalance
                    # == getBalance ==
                    # sp.result(self.data.balances[sp.fst(params)].balance) # @storage : @parameter%getBalance
                    DUP;        # @storage : @storage : @parameter%getBalance
                    DUG 2;      # @storage : @parameter%getBalance : @storage
                    CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%getBalance : @storage
                    CDR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : @parameter%getBalance : @storage
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : @storage
                    SWAP;       # @parameter%getBalance : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUP;        # @parameter%getBalance : @parameter%getBalance : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUG 2;      # @parameter%getBalance : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : @storage
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:100 # @some : @parameter%getBalance : @storage
                      }
                      {
                        PUSH int 100; # int : @parameter%getBalance : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%getBalance : @storage
                    CDR;        # nat : @parameter%getBalance : @storage
                    # sp.transfer(__s99.value, sp.tez(0), sp.snd(params)) # nat : @parameter%getBalance : @storage
                    NIL operation; # list operation : nat : @parameter%getBalance : @storage
                    DIG 2;      # @parameter%getBalance : list operation : nat : @storage
                    CDR;        # contract nat : list operation : nat : @storage
                    PUSH mutez 0; # mutez : contract nat : list operation : nat : @storage
                    DIG 3;      # nat : mutez : contract nat : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%getTotalSupply
                    # == getTotalSupply ==
                    # sp.result(self.data.totalSupply) # @storage : @parameter%getTotalSupply
                    DUP;        # @storage : @storage : @parameter%getTotalSupply
                    DUG 2;      # @storage : @parameter%getTotalSupply : @storage
                    GET 5;      # nat : @parameter%getTotalSupply : @storage
                    # sp.transfer(__s100.value, sp.tez(0), sp.snd(params)) # nat : @parameter%getTotalSupply : @storage
                    NIL operation; # list operation : nat : @parameter%getTotalSupply : @storage
                    DIG 2;      # @parameter%getTotalSupply : list operation : nat : @storage
                    CDR;        # contract nat : list operation : nat : @storage
                    PUSH mutez 0; # mutez : contract nat : list operation : nat : @storage
                    DIG 3;      # nat : mutez : contract nat : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : @storage
          }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%mint
                # == mint ==
                # sp.verify((sp.sender == self.data.administrator) | (sp.sender == sp.self_address)) # @storage : @parameter%mint
                DUP;        # @storage : @storage : @parameter%mint
                DUG 2;      # @storage : @parameter%mint : @storage
                CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%mint : @storage
                CAR;        # address : @parameter%mint : @storage
                SENDER;     # address : address : @parameter%mint : @storage
                COMPARE;    # int : @parameter%mint : @storage
                EQ;         # bool : @parameter%mint : @storage
                IF
                  {
                    PUSH bool True; # bool : @parameter%mint : @storage
                  }
                  {
                    SELF_ADDRESS; # address : @parameter%mint : @storage
                    SENDER;     # address : address : @parameter%mint : @storage
                    COMPARE;    # int : @parameter%mint : @storage
                    EQ;         # bool : @parameter%mint : @storage
                  }; # bool : @parameter%mint : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: (sp.sender == self.data.administrator) | (sp.sender == sp.self_address)"; # string : @parameter%mint : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%mint : @storage
                SWAP;       # @storage : @parameter%mint
                # if ~ (self.data.balances.contains(params.address)): # @storage : @parameter%mint
                DUP;        # @storage : @storage : @parameter%mint
                DUG 2;      # @storage : @parameter%mint : @storage
                CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%mint : @storage
                CDR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : @parameter%mint : @storage
                CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%mint : @storage
                SWAP;       # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                DUP;        # @parameter%mint : @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                DUG 2;      # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%mint : @storage
                CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%mint : @storage
                MEM;        # bool : @parameter%mint : @storage
                IF
                  {}
                  {
                    SWAP;       # @storage : @parameter%mint
                    # self.data.balances[params.address] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%mint
                    UNPAIR;     # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                    UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                    SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                    UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                    PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                    DUP 6;      # @parameter%mint : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                    CAR;        # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                    UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                    PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                    SWAP;       # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                    PAIR;       # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                    PAIR;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                    SWAP;       # @parameter%mint : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                  }; # @parameter%mint : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                SWAP;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                # self.data.balances[params.address].balance += params.value # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                UNPAIR;     # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                UNPAIR;     # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                SWAP;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                DUP 6;      # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                IF_SOME
                  {}
                  {
                    PUSH int 119; # int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                UNPAIR;     # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                SWAP;       # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                DUP 8;      # @parameter%mint : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                CDR;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                ADD;        # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                SWAP;       # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                PAIR;       # pair (map address nat) nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                UPDATE;     # big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                PAIR;       # pair (big_map address (pair (map address nat) nat)) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                SWAP;       # address : pair (big_map address (pair (map address nat) nat)) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                # self.data.totalSupply += params.value # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%mint
                SWAP;       # pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair address (pair (big_map address (pair (map address nat) nat)) bool) : @parameter%mint
                UNPAIR;     # pair (int %state) (address %tokenAddress) : pair (nat %totalSupply) (nat %underlyingBalance) : pair address (pair (big_map address (pair (map address nat) nat)) bool) : @parameter%mint
                SWAP;       # pair (nat %totalSupply) (nat %underlyingBalance) : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool) : @parameter%mint
                UNPAIR;     # nat : nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool) : @parameter%mint
                DIG 4;      # @parameter%mint : nat : nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                CDR;        # nat : nat : nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                ADD;        # nat : nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                PAIR;       # pair nat nat : pair (int %state) (address %tokenAddress) : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                SWAP;       # pair (int %state) (address %tokenAddress) : pair nat nat : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                PAIR;       # pair (pair (int %state) (address %tokenAddress)) (pair nat nat) : pair address (pair (big_map address (pair (map address nat) nat)) bool)
                SWAP;       # pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair (int %state) (address %tokenAddress)) (pair nat nat)
                PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
                NIL operation; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%redeem
                    # == redeem ==
                    # fractionOfPoolOwnership = sp.local("fractionOfPoolOwnership", (params * 1000000000000000000) // self.data.totalSupply) # @storage : @parameter%redeem
                    DUP;        # @storage : @storage : @parameter%redeem
                    DUG 2;      # @storage : @parameter%redeem : @storage
                    GET 5;      # nat : @parameter%redeem : @storage
                    PUSH nat 1000000000000000000; # nat : nat : @parameter%redeem : @storage
                    DUP 3;      # @parameter%redeem : nat : nat : @parameter%redeem : @storage
                    MUL;        # nat : nat : @parameter%redeem : @storage
                    EDIV;       # option (pair nat nat) : @parameter%redeem : @storage
                    IF_SOME
                      {
                        CAR;        # nat : @parameter%redeem : @storage
                      }
                      {
                        PUSH int 88; # int : @parameter%redeem : @storage
                        FAILWITH;   # FAILED
                      }; # nat : @parameter%redeem : @storage
                    # tokensToReceive = sp.local("tokensToReceive", (fractionOfPoolOwnership.value * self.data.underlyingBalance) // 1000000000000000000) # nat : @parameter%redeem : @storage
                    PUSH nat 1000000000000000000; # nat : nat : @parameter%redeem : @storage
                    DUP 4;      # @storage : nat : nat : @parameter%redeem : @storage
                    GET 6;      # nat : nat : nat : @parameter%redeem : @storage
                    DIG 2;      # nat : nat : nat : @parameter%redeem : @storage
                    MUL;        # nat : nat : @parameter%redeem : @storage
                    EDIV;       # option (pair nat nat) : @parameter%redeem : @storage
                    IF_SOME
                      {
                        CAR;        # nat : @parameter%redeem : @storage
                      }
                      {
                        PUSH int 89; # int : @parameter%redeem : @storage
                        FAILWITH;   # FAILED
                      }; # nat : @parameter%redeem : @storage
                    # self.data.underlyingBalance = sp.as_nat(self.data.underlyingBalance - tokensToReceive.value) # nat : @parameter%redeem : @storage
                    DUP 3;      # @storage : nat : @parameter%redeem : @storage
                    UNPAIR;     # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : nat : @parameter%redeem : @storage
                    SWAP;       # pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem : @storage
                    UNPAIR;     # pair (int %state) (address %tokenAddress) : pair (nat %totalSupply) (nat %underlyingBalance) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem : @storage
                    SWAP;       # pair (nat %totalSupply) (nat %underlyingBalance) : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem : @storage
                    CAR;        # nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem : @storage
                    DUP 4;      # nat : nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem : @storage
                    DIG 6;      # @storage : nat : nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem
                    GET 6;      # nat : nat : nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem
                    SUB;        # int : nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem
                    ISNAT;      # option nat : nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem
                    IF_SOME
                      {}
                      {
                        PUSH int 92; # int : nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem
                        FAILWITH;   # FAILED
                      }; # @some : nat : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem
                    SWAP;       # nat : @some : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem
                    PAIR;       # pair nat @some : pair (int %state) (address %tokenAddress) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem
                    SWAP;       # pair (int %state) (address %tokenAddress) : pair nat @some : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem
                    PAIR;       # pair (pair (int %state) (address %tokenAddress)) (pair nat @some) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%redeem
                    SWAP;       # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair (int %state) (address %tokenAddress)) (pair nat @some) : nat : @parameter%redeem
                    PAIR;       # pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some)) : nat : @parameter%redeem
                    DUG 2;      # nat : @parameter%redeem : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    # sp.transfer(sp.record(address = sp.sender, value = params), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), sp.self_address, entry_point='burn').open_some()) # nat : @parameter%redeem : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    NIL operation; # list operation : nat : @parameter%redeem : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    SELF_ADDRESS; # address : list operation : nat : @parameter%redeem : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    CONTRACT %burn (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : nat : @parameter%redeem : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    IF_SOME
                      {}
                      {
                        PUSH int 99; # int : list operation : nat : @parameter%redeem : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                        FAILWITH;   # FAILED
                      }; # @some : list operation : nat : @parameter%redeem : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%redeem : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    DIG 4;      # @parameter%redeem : mutez : @some : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    SENDER;     # address : @parameter%redeem : mutez : @some : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    PAIR %address %value; # pair (address %address) (@parameter%redeem %value) : mutez : @some : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    TRANSFER_TOKENS; # operation : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    CONS;       # list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    # sp.transfer(sp.record(from_ = sp.self_address, to_ = sp.sender, value = tokensToReceive.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.tokenAddress, entry_point='transfer').open_some()) # list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    DUP 3;      # pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some)) : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    CDR;        # pair (pair (int %state) (address %tokenAddress)) (pair nat @some) : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    CAR;        # pair (int %state) (address %tokenAddress) : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    CDR;        # address : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    IF_SOME
                      {}
                      {
                        PUSH int 112; # int : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                        FAILWITH;   # FAILED
                      }; # @some : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    PUSH mutez 0; # mutez : @some : list operation : nat : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    DIG 3;      # nat : mutez : @some : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    SENDER;     # address : nat : mutez : @some : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    PAIR %to %value; # pair (address %to) (nat %value) : mutez : @some : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    SELF_ADDRESS; # address : pair (address %to) (nat %value) : mutez : @some : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    PAIR %from; # pair (address %from) (pair (address %to) (nat %value)) : mutez : @some : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                    CONS;       # list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat @some))
                  }
                  {
                    SWAP;       # @storage : @parameter%setAdministrator
                    # == setAdministrator ==
                    # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%setAdministrator
                    DUP;        # @storage : @storage : @parameter%setAdministrator
                    DUG 2;      # @storage : @parameter%setAdministrator : @storage
                    CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%setAdministrator : @storage
                    CAR;        # address : @parameter%setAdministrator : @storage
                    SENDER;     # address : address : @parameter%setAdministrator : @storage
                    COMPARE;    # int : @parameter%setAdministrator : @storage
                    EQ;         # bool : @parameter%setAdministrator : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%setAdministrator : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setAdministrator : @storage
                    SWAP;       # @storage : @parameter%setAdministrator
                    # self.data.administrator = params # @storage : @parameter%setAdministrator
                    UNPAIR;     # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%setAdministrator
                    CDR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%setAdministrator
                    DIG 2;      # @parameter%setAdministrator : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                    PAIR;       # pair @parameter%setAdministrator (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                    PAIR;       # pair (pair @parameter%setAdministrator (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    NIL operation; # list operation : pair (pair @parameter%setAdministrator (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                  }; # list operation : pair (pair address (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
              }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair nat nat))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setPause
                    # == setPause ==
                    # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%setPause
                    DUP;        # @storage : @storage : @parameter%setPause
                    DUG 2;      # @storage : @parameter%setPause : @storage
                    CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%setPause : @storage
                    CAR;        # address : @parameter%setPause : @storage
                    SENDER;     # address : address : @parameter%setPause : @storage
                    COMPARE;    # int : @parameter%setPause : @storage
                    EQ;         # bool : @parameter%setPause : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%setPause : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setPause : @storage
                    SWAP;       # @storage : @parameter%setPause
                    # self.data.paused = params # @storage : @parameter%setPause
                    UNPAIR;     # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%setPause
                    UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%setPause
                    SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%setPause
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%setPause
                    DIG 3;      # @parameter%setPause : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                    SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%setPause : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                    PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) @parameter%setPause : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                    SWAP;       # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) @parameter%setPause : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                    PAIR;       # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) @parameter%setPause) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                    PAIR;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) @parameter%setPause)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                  }
                  {
                    SWAP;       # @storage : @parameter%transfer
                    # == transfer ==
                    # sp.verify((sp.sender == self.data.administrator) | ((~ self.data.paused) & ((params.from_ == sp.sender) | (self.data.balances[params.from_].approvals[sp.sender] >= params.value)))) # @storage : @parameter%transfer
                    DUP;        # @storage : @storage : @parameter%transfer
                    DUG 2;      # @storage : @parameter%transfer : @storage
                    CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%transfer : @storage
                    CAR;        # address : @parameter%transfer : @storage
                    SENDER;     # address : address : @parameter%transfer : @storage
                    COMPARE;    # int : @parameter%transfer : @storage
                    EQ;         # bool : @parameter%transfer : @storage
                    IF
                      {
                        PUSH bool True; # bool : @parameter%transfer : @storage
                      }
                      {
                        SWAP;       # @storage : @parameter%transfer
                        DUP;        # @storage : @storage : @parameter%transfer
                        DUG 2;      # @storage : @parameter%transfer : @storage
                        CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%transfer : @storage
                        CDR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : @parameter%transfer : @storage
                        CDR;        # bool : @parameter%transfer : @storage
                        IF
                          {
                            PUSH bool False; # bool : @parameter%transfer : @storage
                          }
                          {
                            DUP;        # @parameter%transfer : @parameter%transfer : @storage
                            CAR;        # address : @parameter%transfer : @storage
                            SENDER;     # address : address : @parameter%transfer : @storage
                            COMPARE;    # int : @parameter%transfer : @storage
                            EQ;         # bool : @parameter%transfer : @storage
                            IF
                              {
                                PUSH bool True; # bool : @parameter%transfer : @storage
                              }
                              {
                                DUP;        # @parameter%transfer : @parameter%transfer : @storage
                                GET 4;      # nat : @parameter%transfer : @storage
                                DUP 3;      # @storage : nat : @parameter%transfer : @storage
                                CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : nat : @parameter%transfer : @storage
                                CDR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : nat : @parameter%transfer : @storage
                                CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                                DUP 3;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                                CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                                GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                                IF_SOME
                                  {
                                    # of_some: Get-item:73 # @some : nat : @parameter%transfer : @storage
                                  }
                                  {
                                    PUSH int 73; # int : nat : @parameter%transfer : @storage
                                    FAILWITH;   # FAILED
                                  }; # @some : nat : @parameter%transfer : @storage
                                CAR;        # map address nat : nat : @parameter%transfer : @storage
                                SENDER;     # address : map address nat : nat : @parameter%transfer : @storage
                                GET;        # option nat : nat : @parameter%transfer : @storage
                                IF_SOME
                                  {
                                    # of_some: Get-item:73 # @some : nat : @parameter%transfer : @storage
                                  }
                                  {
                                    PUSH int 73; # int : nat : @parameter%transfer : @storage
                                    FAILWITH;   # FAILED
                                  }; # @some : nat : @parameter%transfer : @storage
                                COMPARE;    # int : @parameter%transfer : @storage
                                GE;         # bool : @parameter%transfer : @storage
                              }; # bool : @parameter%transfer : @storage
                          }; # bool : @parameter%transfer : @storage
                      }; # bool : @parameter%transfer : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: (sp.sender == self.data.administrator) | ((~ self.data.paused) & ((params.from_ == sp.sender) | (self.data.balances[params.from_].approvals[sp.sender] >= params.value)))"; # string : @parameter%transfer : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%transfer : @storage
                    SWAP;       # @storage : @parameter%transfer
                    # if ~ (self.data.balances.contains(params.to_)): # @storage : @parameter%transfer
                    DUP;        # @storage : @storage : @parameter%transfer
                    DUG 2;      # @storage : @parameter%transfer : @storage
                    CAR;        # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%transfer : @storage
                    CDR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : @parameter%transfer : @storage
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                    SWAP;       # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUG 2;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                    GET 3;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                    MEM;        # bool : @parameter%transfer : @storage
                    IF
                      {}
                      {
                        SWAP;       # @storage : @parameter%transfer
                        # self.data.balances[params.to_] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%transfer
                        UNPAIR;     # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        UNPAIR;     # address : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused) : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        DUP 6;      # @parameter%transfer : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        GET 3;      # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        SWAP;       # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        PAIR;       # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        PAIR;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        SWAP;       # @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                      }; # @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    # sp.verify(self.data.balances[params.from_].balance >= params.value) # @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    DUP;        # @parameter%transfer : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    GET 4;      # nat : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    DUP 3;      # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : nat : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CAR;        # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool) : nat : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CDR;        # pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : nat : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    DUP 3;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    IF_SOME
                      {
                        # of_some: Get-item:75 # @some : nat : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                      }
                      {
                        PUSH int 75; # int : nat : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        FAILWITH;   # FAILED
                      }; # @some : nat : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CDR;        # nat : nat : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    COMPARE;    # int : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    GE;         # bool : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.balances[params.from_].balance >= params.value"; # string : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        FAILWITH;   # FAILED
                      }; # @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SWAP;       # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                    # self.data.balances[params.from_].balance = sp.as_nat(self.data.balances[params.from_].balance - params.value) # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                    DUP;        # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                    DUG 2;      # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    UNPAIR;     # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    UNPAIR;     # address : pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SWAP;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    DUP 6;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    IF_SOME
                      {}
                      {
                        PUSH int 76; # int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CAR;        # map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    DUP 7;      # @parameter%transfer : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    GET 4;      # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    DIG 8;      # pair (pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    CAR;        # pair address (pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    CDR;        # pair (big_map address (pair (map %approvals address nat) (nat %balance))) bool : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    DUP 9;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    IF_SOME
                      {
                        # of_some: Get-item:76 # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                      }
                      {
                        PUSH int 76; # int : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        FAILWITH;   # FAILED
                      }; # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    CDR;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    SUB;        # int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    ISNAT;      # option nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    IF_SOME
                      {}
                      {
                        PUSH int 76; # int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        FAILWITH;   # FAILED
                      }; # @some : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    SWAP;       # map address nat : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    PAIR;       # pair (map address nat) @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    SOME;       # option (pair (map address nat) @some) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    SWAP;       # address : option (pair (map address nat) @some) : big_map address (pair (map %approvals address nat) (nat %balance)) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    UPDATE;     # big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    PAIR;       # pair (big_map address (pair (map address nat) nat)) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    SWAP;       # address : pair (big_map address (pair (map address nat) nat)) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                    # self.data.balances[params.to_].balance += params.value # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                    UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    SWAP;       # pair (big_map address (pair (map address nat) nat)) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    UNPAIR;     # big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    DUP 6;      # @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    GET 3;      # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    IF_SOME
                      {}
                      {
                        PUSH int 77; # int : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    UNPAIR;     # map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    SWAP;       # nat : map address nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    DUP 8;      # @parameter%transfer : nat : map address nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    GET 4;      # nat : nat : map address nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    ADD;        # nat : map address nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    SWAP;       # map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    PAIR;       # pair (map address nat) nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    UPDATE;     # big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    PAIR;       # pair (big_map address (pair (map address nat) nat)) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    SWAP;       # address : pair (big_map address (pair (map address nat) nat)) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                    PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                    SWAP;       # @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    # if (params.from_ != sp.sender) & (~ (sp.sender == self.data.administrator)): # @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    DUP;        # @parameter%transfer : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CAR;        # address : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SENDER;     # address : address : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    COMPARE;    # int : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    NEQ;        # bool : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    IF
                      {
                        SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) bool) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        CAR;        # address : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        SENDER;     # address : address : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        COMPARE;    # int : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        NEQ;        # bool : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                      }
                      {
                        PUSH bool False; # bool : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                      }; # bool : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    IF
                      {
                        SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        # self.data.balances[params.from_].approvals[sp.sender] = sp.as_nat(self.data.balances[params.from_].approvals[sp.sender] - params.value) # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        UNPAIR;     # big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        DUP 6;      # @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        IF_SOME
                          {}
                          {
                            PUSH int 79; # int : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            FAILWITH;   # FAILED
                          }; # @some : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        UNPAIR;     # map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        DUP 8;      # @parameter%transfer : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        GET 4;      # nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        DIG 9;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) bool) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        CDR;        # pair (big_map address (pair (map address nat) nat)) bool : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        CAR;        # big_map address (pair (map address nat) nat) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%transfer
                        DIG 9;      # @parameter%transfer : big_map address (pair (map address nat) nat) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        CAR;        # address : big_map address (pair (map address nat) nat) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        GET;        # option (pair (map address nat) nat) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        IF_SOME
                          {
                            # of_some: Get-item:79 # @some : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                          }
                          {
                            PUSH int 79; # int : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                            FAILWITH;   # FAILED
                          }; # @some : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        CAR;        # map address nat : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        SENDER;     # address : map address nat : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        GET;        # option nat : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        IF_SOME
                          {
                            # of_some: Get-item:79 # @some : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                          }
                          {
                            PUSH int 79; # int : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                            FAILWITH;   # FAILED
                          }; # @some : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        SUB;        # int : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        ISNAT;      # option nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        IF_SOME
                          {}
                          {
                            PUSH int 79; # int : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                            FAILWITH;   # FAILED
                          }; # @some : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        SOME;       # option nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        SENDER;     # address : option nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        UPDATE;     # map address nat : nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        PAIR;       # pair (map address nat) nat : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        UPDATE;     # big_map address (pair (map address nat) nat) : bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) bool : address : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) bool : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) bool) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                      }
                      {
                        DROP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                      }; # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                  }; # pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
                NIL operation; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)))
              }
              {
                IF_LEFT
                  {
                    DROP;       # @storage
                    # == updateBalance ==
                    # sp.verify(self.data.state == 0, message = 'bad state') # @storage
                    DUP;        # @storage : @storage
                    CDR;        # pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @storage
                    CAR;        # pair (int %state) (address %tokenAddress) : @storage
                    CAR;        # int : @storage
                    PUSH int 0; # int : int : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH string "bad state"; # string : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # self.data.state = 1 # @storage
                    UNPAIR;     # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance))
                    SWAP;       # pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))
                    UNPAIR;     # pair (int %state) (address %tokenAddress) : pair (nat %totalSupply) (nat %underlyingBalance) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))
                    CDR;        # address : pair (nat %totalSupply) (nat %underlyingBalance) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))
                    PUSH int 1; # int : address : pair (nat %totalSupply) (nat %underlyingBalance) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))
                    PAIR;       # pair int address : pair (nat %totalSupply) (nat %underlyingBalance) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))
                    PAIR;       # pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))
                    SWAP;       # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance))
                    PAIR;       # pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    # sp.transfer((sp.self_address, sp.self_entry_point('updateBalance_callback')), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), self.data.tokenAddress, entry_point='getBalance').open_some()) # pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    DUP;        # pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CDR;        # pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CAR;        # pair int address : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CDR;        # address : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CONTRACT %getBalance (pair address (contract nat)); # option (contract (pair address (contract nat))) : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    IF_SOME
                      {}
                      {
                        PUSH int 132; # int : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        FAILWITH;   # FAILED
                      }; # @some : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    NIL operation; # list operation : @some : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SWAP;       # @some : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PUSH mutez 0; # mutez : @some : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SELF %updateBalance_callback; # contract nat : mutez : @some : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SELF_ADDRESS; # address : contract nat : mutez : @some : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair address (contract nat) : mutez : @some : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CONS;       # list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)))
                  }
                  {
                    SWAP;       # @storage : @parameter%updateBalance_callback
                    # == updateBalance_callback ==
                    # sp.verify(sp.sender == self.data.tokenAddress, message = 'bad sender') # @storage : @parameter%updateBalance_callback
                    DUP;        # @storage : @storage : @parameter%updateBalance_callback
                    DUG 2;      # @storage : @parameter%updateBalance_callback : @storage
                    CDR;        # pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%updateBalance_callback : @storage
                    CAR;        # pair (int %state) (address %tokenAddress) : @parameter%updateBalance_callback : @storage
                    CDR;        # address : @parameter%updateBalance_callback : @storage
                    SENDER;     # address : address : @parameter%updateBalance_callback : @storage
                    COMPARE;    # int : @parameter%updateBalance_callback : @storage
                    EQ;         # bool : @parameter%updateBalance_callback : @storage
                    IF
                      {}
                      {
                        PUSH string "bad sender"; # string : @parameter%updateBalance_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%updateBalance_callback : @storage
                    # sp.verify(self.data.state == 1, message = 'bad state') # @parameter%updateBalance_callback : @storage
                    PUSH int 1; # int : @parameter%updateBalance_callback : @storage
                    DUP 3;      # @storage : int : @parameter%updateBalance_callback : @storage
                    CDR;        # pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : int : @parameter%updateBalance_callback : @storage
                    CAR;        # pair (int %state) (address %tokenAddress) : int : @parameter%updateBalance_callback : @storage
                    CAR;        # int : int : @parameter%updateBalance_callback : @storage
                    COMPARE;    # int : @parameter%updateBalance_callback : @storage
                    EQ;         # bool : @parameter%updateBalance_callback : @storage
                    IF
                      {}
                      {
                        PUSH string "bad state"; # string : @parameter%updateBalance_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%updateBalance_callback : @storage
                    SWAP;       # @storage : @parameter%updateBalance_callback
                    # self.data.state = 0 # @storage : @parameter%updateBalance_callback
                    UNPAIR;     # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%updateBalance_callback
                    SWAP;       # pair (pair (int %state) (address %tokenAddress)) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%updateBalance_callback
                    UNPAIR;     # pair (int %state) (address %tokenAddress) : pair (nat %totalSupply) (nat %underlyingBalance) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%updateBalance_callback
                    CDR;        # address : pair (nat %totalSupply) (nat %underlyingBalance) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%updateBalance_callback
                    PUSH int 0; # int : address : pair (nat %totalSupply) (nat %underlyingBalance) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%updateBalance_callback
                    PAIR;       # pair int address : pair (nat %totalSupply) (nat %underlyingBalance) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%updateBalance_callback
                    PAIR;       # pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%updateBalance_callback
                    SWAP;       # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%updateBalance_callback
                    PAIR;       # pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateBalance_callback
                    # self.data.underlyingBalance = params # pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateBalance_callback
                    UNPAIR;     # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)) : @parameter%updateBalance_callback
                    SWAP;       # pair (pair int address) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%updateBalance_callback
                    UNPAIR;     # pair int address : pair (nat %totalSupply) (nat %underlyingBalance) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%updateBalance_callback
                    SWAP;       # pair (nat %totalSupply) (nat %underlyingBalance) : pair int address : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%updateBalance_callback
                    CAR;        # nat : pair int address : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : @parameter%updateBalance_callback
                    DIG 3;      # @parameter%updateBalance_callback : nat : pair int address : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))
                    SWAP;       # nat : @parameter%updateBalance_callback : pair int address : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))
                    PAIR;       # pair nat @parameter%updateBalance_callback : pair int address : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))
                    SWAP;       # pair int address : pair nat @parameter%updateBalance_callback : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))
                    PAIR;       # pair (pair int address) (pair nat @parameter%updateBalance_callback) : pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))
                    SWAP;       # pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused)) : pair (pair int address) (pair nat @parameter%updateBalance_callback)
                    PAIR;       # pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair nat @parameter%updateBalance_callback))
                    NIL operation; # list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair nat @parameter%updateBalance_callback))
                  }; # list operation : pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (bool %paused))) (pair (pair int address) (pair nat nat))
              }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair int address) (pair nat nat))
          }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair int address) (pair nat nat))
      }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair int address) (pair nat nat))
    NIL operation; # list operation : list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair int address) (pair nat nat))
    SWAP;       # list operation : list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair int address) (pair nat nat))
    ITER
      {
        CONS;       # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair int address) (pair nat nat))
      }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair int address) (pair nat nat))
    PAIR;       # pair (list operation) (pair (pair address (pair (big_map address (pair (map address nat) nat)) bool)) (pair (pair int address) (pair nat nat)))
  };